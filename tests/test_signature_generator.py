import pytest
from blocklib import generate_signatures


class TestPSig:

    def test_feature_value(self):
        """Test signatures generated by feature-value."""
        dtuple = ('Joyce', 'Wang', 2134)
        signatures = [[{'type': 'feature-value', 'feature-idx': 0},
                      {'type': 'feature-value', 'feature-idx': 1},
                      ]]
        signatures = generate_signatures(signatures, dtuple)
        assert signatures == {"0_Joyce_Wang"}

    def test_char_at(self):
        """Test signatures generated by characters-at."""
        dtuple = ('Joyce', 'Wang', 2134)
        # test start_ind: end_ind
        signatures = [[{'type': 'characters-at', 'feature-idx': 0, 'config': {'pos': ["1:4"]}},
                      {'type': 'characters-at', 'feature-idx': 1, 'config': {'pos': ["1:4"]}}
                      ]]
        signatures = generate_signatures(signatures, dtuple)
        assert signatures == {"0_oyc_ang"}

        # test :end_ind
        strategy = [
            [
                {'type': 'characters-at', 'feature-idx': 0, 'config': {'pos': [':2', '-2:', 2, '2']}}
            ]
        ]
        signature = generate_signatures(strategy, dtuple)
        assert signature == {"0_Joceyy"}

        res = generate_signatures(strategy, ('', ''))
        assert res == {'0_'}

        invalid_strategy = [
            [
                {'type': 'characters-at', 'feature-idx': 0, 'config': {'pos': ['1-2', '-2:', 2, '2']}}
            ]
        ]
        with pytest.raises(ValueError) as e:
            generate_signatures(invalid_strategy, dtuple)
            assert e == 'Invalid pos argument: 1-2'

    def test_metaphonee(self):
        """Test signatures generated by metaphone."""
        dtuple = ('Smith', 'Schmidt', 2134)
        signature_strategies = [
            [
                {'type': 'metaphone', 'feature-idx': 0}
            ]
        ]
        signatures = generate_signatures(signature_strategies, dtuple)
        assert signatures == {"0_SM0XMT"}

    def test_generate_signatures(self):
        """Test a multi-strategy signatures."""
        dtuple = ('Joyce', 'Wang', 2134)
        signatures = [
            [
                {'type': 'feature-value', 'feature-idx': 0},
                {'type': 'feature-value', 'feature-idx': 1},
            ],
            [
                {'type': 'metaphone', 'feature-idx': 0},
                {'type': 'metaphone', 'feature-idx': 1},
            ]
        ]
        signatures = generate_signatures(signatures, dtuple)
        assert signatures == {"1_JSAS_ANKFNK", "0_Joyce_Wang"}

    def test_invalid_signature_type(self):
        dtuple = ('Joyce', 'Wang', 2134)
        signatures = [
            [
                {'type': 'fuzzy matching'}
            ]
        ]
        with pytest.raises(NotImplementedError) as e:
            generate_signatures(signatures, dtuple)
            assert e == 'Strategy fuzzy matching is not implemented yet!'