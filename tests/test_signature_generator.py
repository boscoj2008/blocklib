import unittest
from blocklib import generate_signatures


class TestPSig(unittest.TestCase):

    def test_feature_value(self):
        """Test signatures generated by feature-value."""
        dtuple = ('Joyce', 'Wang', 2134)
        signatures = [[{'type': 'feature-value', 'feature_idx': 0},
                      {'type': 'feature-value', 'feature_idx': 1},
                      ]]
        signatures = generate_signatures(signatures, dtuple)
        assert signatures == {"JoyceWang"}

    def test_char_at(self):
        """Test signatures generated by characters_at."""
        attr_ind = [0, 1]
        dtuple = ('Joyce', 'Wang', 2134)
        signatures = [[{'type': 'characters_at', 'feature_idx': 0, 'config': {'pos': ["1:4"]}},
                      {'type': 'characters_at', 'feature_idx': 1, 'config': {'pos': ["1:4"]}}
                      ]]
        signatures = generate_signatures(signatures, dtuple)
        assert signatures == {"oycang"}

    # def test_soundex(self):
    #     """Test signatures generated by soundex."""
    #     dtuple = ('Joyce', 'Wang', 2134)
    #     signature_strategies = [[{'type': 'soundex', 'feature_idx': 0},
    #                             {'type': 'soundex', 'feature_idx': 1},]]
    #     signatures = generate_signatures(signature_strategies, dtuple)
    #     assert signatures == {'J2W52'}

    def test_metaphonee(self):
        """Test signatures generated by metaphone."""
        dtuple = ('Smith', 'Schmidt', 2134)
        signature_strategies = [
            [
                {'type': 'metaphone', 'feature_idx': 0}
            ]
        ]
        signatures = generate_signatures(signature_strategies, dtuple)
        assert signatures == {"SM0XMT"}
        'SM0XMT'

    def test_generate_signatures(self):
        """Test a multi-stragegy signatures."""
        dtuple = ('Joyce', 'Wang', 2134)
        signatures = [
            [
                {'type': 'feature-value', 'feature_idx': 0},
                {'type': 'feature-value', 'feature_idx': 1},
            ],
            [
                {'type': 'soundex', 'feature_idx': 0},
                {'type': 'soundex', 'feature_idx': 1},
            ]
        ]
        signatures = generate_signatures(signatures, dtuple)
        assert signatures == {"J2W52", "JoyceWang"}

    # def test_n_gram(self):
    #     """Test signatures generated by n-gram."""
    #     attr_ind = [0, 1]
    #     dtuple = ('Joyce', 'Wang', 2134)
    #
    #     # test 2-gram
    #     signatures = [
    #         {'type': 'n-gram', 'columns': attr_ind, 'config': {'n': 2}},
    #         {'type': 'n-gram', 'columns': attr_ind, 'config': {'n': 3}}
    #     ]
    #     signatures = generate_signatures(signatures, dtuple)
    #     res1 = {'Jo', 'oy', 'yc', 'ce', 'eW', 'Wa', 'an', 'ng'}
    #     res2 = {'Joy', 'oyc', 'yce', 'ceW', 'eWa', 'Wan', 'ang'}
    #     assert signatures == res1.union(res2)
